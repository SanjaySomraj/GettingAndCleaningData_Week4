x <- matrix()
if (!is.null(invrs)) {
invrs <- x$getInverse()
message("Fetching cached data")
return(invrs)
}
else {
message("NULL Matrix")
mat <- x$get()
invrs <- solve(mat, ...)
x$setInverse(invrs)
invrs
return()
}
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invrs <- matrix()
if (!is.null(invrs)) {
invrs <- x$getInverse()
message("Fetching cached data")
return(invrs)
}
else {
message("NULL Matrix")
mat <- x$get()
invrs <- solve(mat, ...)
x$setInverse(invrs)
invrs
return()
}
}
my_mtrx <- NULL
cacheSolve(my_mtrx)
cacheSolve()
cacheSolve(x = NULL)
cacheSolve(x)
class(x)
makeCacheMatrix <- function(x = matrix()) {
invrs <- NULL
set <- function(y){
x <<- y
invrs <<- NULL
}
get <- function() x
setInverse <- function(solve) invrs <<- solve
getInverse <- function() invrs
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
mymatrix <- makeCacheMatrix(matrix(1:4,2,2))
mymatrix
mymatrix$get()
mymatrix$getInverse()
cacheSolve(mymatrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invrs <- x$getInverse()
if (!is.null(invrs)) {
print("Fetching inverse matrix from cache")
return(invrs)
}
mat <- x$get()
invrs <- solve(mat, ...)
x$setInverse(invrs)
invrs
}
cacheSolve(mymatrix)
mymatrix$getInverse()
mymatrix$setInverse()
makeCacheMatrix <- function(x = matrix()) {
invrs <- NULL
set <- function(y){
x <<- y
invrs <<- NULL
}
get <- function() x
setInverse <- function(inverse) invrs <<- inverse
getInverse <- function() invrs
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
mymatrix <- makeCacheMatrix(matrix(1:4,2,2))
mymatrix$get()
mymatrix <- makeCacheMatrix(matrix(30:33,2,2))
mymatrix$get()
mymatrix$getInverse()
cacheSolve(mymatrix)
mymatrix$getInverse()
mymatrix <- makeCacheMatrix(matrix(20:23,2,2))
mymatrix$getInverse()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invrs <- x$getInverse()
if (!is.null(invrs)) {
print("Fetching inverse matrix from cache")
return(invrs)
}
else{
newMatrix <- x$get()
invrs <- solve(newMatrix)
x$setInverse(invrs)
return(invrs)
}
}
mymatrix <- makeCacheMatrix(matrix(1:4,2,2))
mymatrix$get()
mymatrix$getInverse()
cacheSolve(mymatrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invrs <- x$getInverse()
if (!is.null(invrs)) {
message("Fetching inverse matrix from cache")
return(invrs)
}
else{
newMatrix <- x$get()
invrs <- solve(newMatrix)
x$setInverse(invrs)
return(invrs)
}
}
mymatrix <- makeCacheMatrix(matrix(1:4,2,2))
mymatrix$get()
mymatrix$getInverse()
cacheSolve(mymatrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invrs <- x$getInverse()
if (!is.null(invrs)) {
message("Fetching inverse matrix from cache")
return(invrs)
}
else{
newMatrix <- x$get()
invrs <- solve(newMatrix)
x$setInverse(invrs)
return(invrs)
}
}
makeCacheMatrix <- function(x = matrix()) {
invrs <- NULL
set <- function(y){
x <<- y
invrs <<- NULL
}
get <- function() x
setInverse <- function(inverse) invrs <<- inverse
getInverse <- function() invrs
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
mymatrix <- makeCacheMatrix(matrix(1:4,2,2))
mymatrix$get()
mymatrix$getInverse()
cacheSolve(mymatrix)
mymatrix$getInverse()
cacheSolve(mymatrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invrs <- x$getInverse()
if (!is.null(invrs)) {
message("Fetching inverse matrix from cache")
return(invrs)
}
else{
message("Creating inverse matrix")
newMatrix <- x$get()
invrs <- solve(newMatrix)
x$setInverse(invrs)
return(invrs)
}
}
makeCacheMatrix <- function(x = matrix()) {
invrs <- NULL
set <- function(y){
x <<- y
invrs <<- NULL
}
get <- function() x
setInverse <- function(inverse) invrs <<- inverse
getInverse <- function() invrs
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invrs <- x$getInverse()
if (!is.null(invrs)) {
message("Fetching inverse matrix from cache")
return(invrs)
}
else{
message("Creating inverse matrix")
newMatrix <- x$get()
invrs <- solve(newMatrix)
x$setInverse(invrs)
return(invrs)
}
}
mymatrix <- makeCacheMatrix(matrix(1:4,2,2))
mymatrix$get()
mymatrix$getInverse()
cacheSolve(mymatrix)
cacheSolve(mymatrix)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vect1 <- makeVector(c(1,2,3,4))
vect1$get()
vect1$getmean()
cachemean(vect1)
cachemean(vect1)
q()
setwd("D:/Sanjay S/KM/DataScienceProjects/G and C data/04/UCI HAR Dataset")
x_train <- read.table("./train/X_train.txt")
y_train <- read.table("./train/y_train.txt")
class(x_train)
head(x_train)
head(y_train)
colnames(y_train)
nrow(y_train)
x_test <- read.table("./test/X_test.txt")
y_test <- read.table("./test/y_test.txt")
subject_test <- read.table("./test/subject_test.txt")
features <- read.table('./features.txt')
activityLabels = read.table('./activity_labels.txt')
features[,2]
colnames(x_train) <- features[,2]
colnames(y_train) <-"activityId"
colnames(subject_train) <- "subjectId"
subject_train <- read.table("./train/subject_train.txt")
colnames(subject_train) <- "subjectId"
colnames(x_test) <- features[,2]
colnames(y_test) <- "activityId"
colnames(subject_test) <- "subjectId"
colnames(activityLabels) <- c('activityId','activityType')
mrg_train <- cbind(y_train, subject_train, x_train)
mrg_test <- cbind(y_test, subject_test, x_test)
setAllInOne <- rbind(mrg_train, mrg_test)
colNames <- colnames(setAllInOne)
mean_and_std <- (grepl("activityId" , colNames) |
grepl("subjectId" , colNames) |
grepl("mean.." , colNames) |
grepl("std.." , colNames)
)
setForMeanAndStd <- setAllInOne[ , mean_and_std == TRUE]
class(setForMeanAndStd)
colnames(setForMeanAndStd)
# Source of data for this project: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# This R script does the following:
# 1. READING THE DATA TEXT FILES
# 1.1 Reads the data text files for Training
xTrainData <- read.table("./train/X_train.txt")
yTrainData <- read.table("./train/y_train.txt")
# 1.2 Reads the data text files for Test
xTestData <- read.table("./test/X_test.txt")
yTestData <- read.table("./test/y_test.txt")
# 1.3 Reads the data text files of the subjects (volunteers)
subjectTrainData <- read.table("./train/subject_train.txt")
subjectTestData <- read.table("./test/subject_test.txt")
# 1.4 Reading feature data text file
featuresData <- read.table('./features.txt')
# 1.5 Reading activity labels from the activity data text file
activityLabelsData = read.table('./activity_labels.txt')
# Assigning Column Names for Training and Test data
# NOTE 1: The column names for x Train Data are the features
# NOTE 2: The column name for y Train Data is the activity type or ID
# NOTE 3: The above note applies to the x and y Test data also
colnames(xTrainData) <- featuresData[,2]
colnames(yTrainData) <-"activityId"
colnames(subjectTrainData) <- "subjectId"
colnames(xTestData) <- features[,2]
colnames(yTestData) <- "activityId"
colnames(subjectTestData) <- "subjectId"
# 2. Assigning Column Names for Activity Labels data
colnames(activityLabelsData) <- c('activityId','activityType')
# 3. Merging the Training and Test Data sets
mergeTrainData <- cbind(yTrainData, subjectTrainData, xTrainData)
mergeTestData <- cbind(yTestData, subjectTestData, xTestData)
completeData <- rbind(mergeTrainData, mergeTestData)
xTrainData <- read.table("./train/X_train.txt")
# Source of data for this project: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# This R script does the following:
# 1. READING THE DATA TEXT FILES
# 1.1 Reads the data text files for Training
xTrainData <- read.table("./train/X_train.txt")
yTrainData <- read.table("./train/y_train.txt")
# 1.2 Reads the data text files for Test
xTestData <- read.table("./test/X_test.txt")
yTestData <- read.table("./test/y_test.txt")
# 1.3 Reads the data text files of the subjects (volunteers)
subjectTrainData <- read.table("./train/subject_train.txt")
subjectTestData <- read.table("./test/subject_test.txt")
# 1.4 Reading feature data text file
featuresData <- read.table('./features.txt')
# 1.5 Reading activity labels from the activity data text file
activityLabelsData = read.table('./activity_labels.txt')
# Assigning Column Names for Training and Test data
# NOTE 1: The column names for x Train Data are the features
# NOTE 2: The column name for y Train Data is the activity type or ID
# NOTE 3: The above note applies to the x and y Test data also
colnames(xTrainData) <- featuresData[,2]
colnames(yTrainData) <-"activityId"
colnames(subjectTrainData) <- "subjectId"
colnames(xTestData) <- featuresData[,2]
colnames(yTestData) <- "activityId"
colnames(subjectTestData) <- "subjectId"
# 2. Assigning Column Names for Activity Labels data
colnames(activityLabelsData) <- c('activityId','activityType')
# 3. Merging the Training and Test Data sets
mergeTrainData <- cbind(yTrainData, subjectTrainData, xTrainData)
mergeTestData <- cbind(yTestData, subjectTestData, xTestData)
completeData <- rbind(mergeTrainData, mergeTestData)
# Source of data for this project: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# This R script does the following:
# 1. READING THE DATA TEXT FILES
# 1.1 Reads the data text files for Training
xTrainData <- read.table("./train/X_train.txt")
yTrainData <- read.table("./train/y_train.txt")
# 1.2 Reads the data text files for Test
xTestData <- read.table("./test/X_test.txt")
yTestData <- read.table("./test/y_test.txt")
# 1.3 Reads the data text files of the subjects (volunteers)
subjectTrainData <- read.table("./train/subject_train.txt")
subjectTestData <- read.table("./test/subject_test.txt")
# 1.4 Reading feature data text file
featuresData <- read.table('./features.txt')
# 1.5 Reading activity labels from the activity data text file
activityLabelsData = read.table('./activity_labels.txt')
# 2. ASSIGNING COLUMN NAMES FOR THE DATA SETS
# 2.1 Assigning Column Names for Training and Test data
# NOTE 1: The column names for x Train Data are the features
# NOTE 2: The column name for y Train Data is the activity type or ID
# NOTE 3: The above note applies to the x and y Test data also
colnames(xTrainData) <- featuresData[,2]
colnames(yTrainData) <-"activityId"
colnames(subjectTrainData) <- "subjectId"
colnames(xTestData) <- featuresData[,2]
colnames(yTestData) <- "activityId"
colnames(subjectTestData) <- "subjectId"
# 2.2 Assigning Column Names for Activity Labels data
colnames(activityLabelsData) <- c('activityId','activityType')
# 3. MERGING THE TRAINING AND TEST DATA SETS
mergeTrainData <- cbind(yTrainData, subjectTrainData, xTrainData)
mergeTestData <- cbind(yTestData, subjectTestData, xTestData)
completeData <- rbind(mergeTrainData, mergeTestData)
# 4. EXTRACTING THE MEASUREMENTS ON MEAN AND STD_DEV FOR EACH MEASUREMENT
# 4.1 Reading column names and creating a vector for the Activity & Subject ID, Mean and Std Dev
colNames <- colnames(completeData)
meanAndstdDev <- (grepl("activityId" , colNames) | grepl("subjectId" , colNames) |
grepl("mean.." , colNames) | grepl("std.." , colNames))
setForMeanAndStd <- completeData[ , mean_and_std == TRUE]
# 4.2 Making nessesary subset from unified data set - completeData
setActivityNames <- merge(setForMeanAndStd, activityLabelsData,
by='activityId',
all.x=TRUE)
# 5. CREATING A NEW INDEPENDENT TIDY DATA SET WITH THE MEAN AND STD-DEV OF
#    EACH OBSERVATION, ACTIVITY AND  SUBJECT
newTidySet <- aggregate(. ~subjectId + activityId, setActivityNames, mean)
newTidySet <- secTidySet[order(secTidySet$subjectId, secTidySet$activityId),]
write.table(newTidySet, "newTidySet.txt", row.name=FALSE)
# Source of data for this project: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# This R script does the following:
# 1. READING THE DATA TEXT FILES
# 1.1 Reads the data text files for Training
xTrainData <- read.table("./train/X_train.txt")
yTrainData <- read.table("./train/y_train.txt")
# 1.2 Reads the data text files for Test
xTestData <- read.table("./test/X_test.txt")
yTestData <- read.table("./test/y_test.txt")
# 1.3 Reads the data text files of the subjects (volunteers)
subjectTrainData <- read.table("./train/subject_train.txt")
subjectTestData <- read.table("./test/subject_test.txt")
# 1.4 Reading feature data text file
featuresData <- read.table('./features.txt')
# 1.5 Reading activity labels from the activity data text file
activityLabelsData = read.table('./activity_labels.txt')
# 2. ASSIGNING COLUMN NAMES FOR THE DATA SETS
# 2.1 Assigning Column Names for Training and Test data
# NOTE 1: The column names for x Train Data are the features
# NOTE 2: The column name for y Train Data is the activity type or ID
# NOTE 3: The above note applies to the x and y Test data also
colnames(xTrainData) <- featuresData[,2]
colnames(yTrainData) <-"activityId"
colnames(subjectTrainData) <- "subjectId"
colnames(xTestData) <- featuresData[,2]
colnames(yTestData) <- "activityId"
colnames(subjectTestData) <- "subjectId"
# 2.2 Assigning Column Names for Activity Labels data
colnames(activityLabelsData) <- c('activityId','activityType')
# 3. MERGING THE TRAINING AND TEST DATA SETS
mergeTrainData <- cbind(yTrainData, subjectTrainData, xTrainData)
mergeTestData <- cbind(yTestData, subjectTestData, xTestData)
completeData <- rbind(mergeTrainData, mergeTestData)
# 4. EXTRACTING THE MEASUREMENTS ON MEAN AND STD_DEV FOR EACH MEASUREMENT
# 4.1 Reading column names and creating a vector for the Activity & Subject ID, Mean and Std Dev
colNames <- colnames(completeData)
meanAndstdDev <- (grepl("activityId" , colNames) | grepl("subjectId" , colNames) |
grepl("mean.." , colNames) | grepl("std.." , colNames))
setForMeanAndStd <- completeData[ , mean_and_std == TRUE]
# 4.2 Making nessesary subset from unified data set - completeData
setActivityNames <- merge(setForMeanAndStd, activityLabelsData,
by='activityId',
all.x=TRUE)
# 5. CREATING A NEW INDEPENDENT TIDY DATA SET WITH THE MEAN AND STD-DEV OF
#    EACH OBSERVATION, ACTIVITY AND  SUBJECT
newTidySet <- aggregate(. ~subjectId + activityId, setActivityNames, mean)
newTidySet <- newTidySet[order(newTidySet$subjectId, newTidySet$activityId),]
write.table(newTidySet, "newTidySet.txt", row.name=FALSE)
# Source of data for this project: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# This R script does the following:
# 1. READING THE DATA TEXT FILES
# 1.1 Reads the data text files for Training
xTrainData <- read.table("./train/X_train.txt")
yTrainData <- read.table("./train/y_train.txt")
# 1.2 Reads the data text files for Test
xTestData <- read.table("./test/X_test.txt")
yTestData <- read.table("./test/y_test.txt")
# 1.3 Reads the data text files of the subjects (volunteers)
subjectTrainData <- read.table("./train/subject_train.txt")
subjectTestData <- read.table("./test/subject_test.txt")
# 1.4 Reading feature data text file
featuresData <- read.table('./features.txt')
# 1.5 Reading activity labels from the activity data text file
activityLabelsData = read.table('./activity_labels.txt')
# 2. ASSIGNING COLUMN NAMES FOR THE DATA SETS
# 2.1 Assigning Column Names for Training and Test data
# NOTE 1: The column names for x Train Data are the features
# NOTE 2: The column name for y Train Data is the activity type or ID
# NOTE 3: The above note applies to the x and y Test data also
colnames(xTrainData) <- featuresData[,2]
colnames(yTrainData) <-"activityId"
colnames(subjectTrainData) <- "subjectId"
colnames(xTestData) <- featuresData[,2]
colnames(yTestData) <- "activityId"
colnames(subjectTestData) <- "subjectId"
# 2.2 Assigning Column Names for Activity Labels data
colnames(activityLabelsData) <- c('activityId','activityType')
# 3. MERGING THE TRAINING AND TEST DATA SETS
mergeTrainData <- cbind(yTrainData, subjectTrainData, xTrainData)
mergeTestData <- cbind(yTestData, subjectTestData, xTestData)
completeData <- rbind(mergeTrainData, mergeTestData)
# 4. EXTRACTING THE MEASUREMENTS ON MEAN AND STD_DEV FOR EACH MEASUREMENT
# 4.1 Reading column names and creating a vector for the Activity & Subject ID, Mean and Std Dev
colNames <- colnames(completeData)
meanAndstdDev <- (grepl("activityId" , colNames) | grepl("subjectId" , colNames) |
grepl("mean.." , colNames) | grepl("std.." , colNames))
setForMeanAndStd <- completeData[ , meanAndstdDev == TRUE]
# 4.2 Making nessesary subset from unified data set - completeData
setActivityNames <- merge(setForMeanAndStd, activityLabelsData,
by='activityId',
all.x=TRUE)
# 5. CREATING A NEW INDEPENDENT TIDY DATA SET WITH THE MEAN AND STD-DEV OF
#    EACH OBSERVATION, ACTIVITY AND  SUBJECT
newTidySet <- aggregate(. ~subjectId + activityId, setActivityNames, mean)
newTidySet <- newTidySet[order(newTidySet$subjectId, newTidySet$activityId),]
write.table(newTidySet, "newTidySet.txt", row.name=FALSE)
renewTidySet <- read.table("./newTidySet.txt")
identical(newTidySet, renewTidySet)
View(renewTidySet)
View(newTidySet)
---
title: "CodeBook"
author: "Sanjay Somraj"
date: "January 26, 2017"
output: html_document
---
## Code Book
### Getting and Cleaning Data: Programming Assignment - Week 4
The attached R Script - processData.R does the following
1. READING THE DATA TEXT FILES
+ 1.1 Reads the data text files for Training
+ 1.2 Reads the data text files for Test
+ 1.3 Reads the data text files of the subjects (volunteers)
+ 1.4 Reading feature data text file
+ 1.5 Reading activity labels from the activity data text file
2. ASSIGNING COLUMN NAMES FOR THE DATA SETS
+ 2.1 Assigning Column Names for Training and Test data
+ 2.2 Assigning Column Names for Activity Labels data
3. MERGING THE TRAINING AND TEST DATA SETS
4. EXTRACTING THE MEASUREMENTS ON MEAN AND STD_DEV FOR EACH MEASUREMENT
+ 4.1 Reading column names and creating a vector for the Activity & Subject ID, Mean and Std Dev
+ 4.2 Making nessesary subset from unified data set - completeData
5. CREATING A NEW INDEPENDENT TIDY DATA
+ 5.1 Set the Mean and Std-Dev of each Observation, Activity And  Subject
+ 5.2 Order the new Tidy Data set on the Subject and Activity
+ 5.3 Write the ordered new Tidy Data Set in to a TXT file
#### NOTE 1: The column names for x Train Data are the features
#### NOTE 2: The column name for y Train Data is the activity type or ID
#### NOTE 3: The above note applies to the x and y Test data also
class(setActivityNames)
logout
q()
